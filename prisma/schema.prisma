// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User Roles: ADMIN, NORMAL, PREMIUM
enum UserRole {
  ADMIN
  NORMAL
  PREMIUM
}

// Prediction Types
enum PredictionType {
  ONE_X_TWO          // 1X2
  OVER_UNDER_2_5     // 2.5 Üst/Alt
  OVER_UNDER_3_5     // 3.5 Üst/Alt
  BOTH_TEAMS_SCORE   // KG Var
  HALF_TIME_FULL_TIME // İlk Yarı/Maç Sonucu
}

// Result Status
enum ResultStatus {
  PENDING   // Beklemede
  WON       // Kazandı
  LOST      // Kaybetti
}

// Payment Status
enum PaymentStatus {
  PENDING   // Beklemede
  APPROVED  // Onaylandı
  REJECTED  // Reddedildi
}

// Package Types
enum PackageType {
  MONTHLY   // Aylık
  YEARLY    // Yıllık
}

// Like Types
enum LikeType {
  LIKE      // Beğeni
  DISLIKE   // Beğenmeme
}

// Users Table
model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  adminUsername     String?   @unique @map("admin_username") // Admin username (@süleymando)
  role              UserRole  @default(NORMAL)
  premiumUntil      DateTime? @map("premium_until")
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  predictions       Prediction[]
  coupons          Coupon[]
  payments         Payment[]
  predictionLikes  PredictionLike[]
  couponLikes      CouponLike[]

  @@map("users")
}

// Leagues Table
model League {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  country     String
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  teams       Team[]
  predictions Prediction[]

  @@map("leagues")
}

// Teams Table
model Team {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  shortName String?  @map("short_name") // Takım kısa adı (FB, GS, BJK vb.)
  leagueId  Int      @map("league_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  league           League @relation(fields: [leagueId], references: [id])
  homePredictions  Prediction[] @relation("HomeTeam")
  awayPredictions  Prediction[] @relation("AwayTeam")

  @@map("teams")
}

// Predictions Table
model Prediction {
  id             Int            @id @default(autoincrement())
  adminId        Int            @map("admin_id")
  homeTeamId     Int            @map("home_team_id")
  awayTeamId     Int            @map("away_team_id")
  leagueId       Int            @map("league_id")
  matchDate      DateTime       @map("match_date")
  predictionType PredictionType @map("prediction_type")
  predictionText String?        @map("prediction_text") // Custom prediction text
  odds           Float
  confidence     Int            // 0-100
  analysis       String?
  isPremium      Boolean        @default(false) @map("is_premium")
  resultStatus   ResultStatus   @default(PENDING) @map("result_status")
  isActive       Boolean        @default(true) @map("is_active")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  // Relations
  admin          User   @relation(fields: [adminId], references: [id])
  homeTeam       Team   @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam       Team   @relation("AwayTeam", fields: [awayTeamId], references: [id])
  league         League @relation(fields: [leagueId], references: [id])
  couponPredictions CouponPrediction[]
  likes          PredictionLike[]

  @@map("predictions")
}

// Coupons Table (2-3 prediction combinations)
model Coupon {
  id           Int          @id @default(autoincrement())
  adminId      Int          @map("admin_id")
  title        String
  description  String?
  totalOdds    Float        @map("total_odds")
  isPremium    Boolean      @default(false) @map("is_premium")
  resultStatus ResultStatus @default(PENDING) @map("result_status")
  isActive     Boolean      @default(true) @map("is_active")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Relations
  admin            User   @relation(fields: [adminId], references: [id])
  couponPredictions CouponPrediction[]
  likes            CouponLike[]

  @@map("coupons")
}

// Junction table for Coupons and Predictions
model CouponPrediction {
  id           Int @id @default(autoincrement())
  couponId     Int @map("coupon_id")
  predictionId Int @map("prediction_id")

  // Relations
  coupon     Coupon     @relation(fields: [couponId], references: [id], onDelete: Cascade)
  prediction Prediction @relation(fields: [predictionId], references: [id], onDelete: Cascade)

  @@unique([couponId, predictionId])
  @@map("coupon_predictions")
}

// Prediction Likes Table
model PredictionLike {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  predictionId Int      @map("prediction_id")
  likeType     LikeType @map("like_type")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  prediction Prediction @relation(fields: [predictionId], references: [id], onDelete: Cascade)

  @@unique([userId, predictionId])
  @@map("prediction_likes")
}

// Coupon Likes Table
model CouponLike {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  couponId  Int      @map("coupon_id")
  likeType  LikeType @map("like_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@unique([userId, couponId])
  @@map("coupon_likes")
}

// Payments Table (Bank Transfer System)
model Payment {
  id          Int           @id @default(autoincrement())
  userId      Int           @map("user_id")
  amount      Float
  packageType PackageType   @map("package_type")
  status      PaymentStatus @default(PENDING)
  receiptUrl  String?       @map("receipt_url") // Uploaded receipt file path
  adminNote   String?       @map("admin_note")  // Admin approval/rejection note
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("payments")
}

// Site Settings Table (Admin managed)
model SiteSetting {
  id            Int      @id @default(autoincrement())
  monthlyPrice  Float    @map("monthly_price")
  yearlyPrice   Float    @map("yearly_price")
  monthlyDays   Int      @default(30) @map("monthly_days")   // Premium duration for monthly
  yearlyDays    Int      @default(365) @map("yearly_days")   // Premium duration for yearly
  bankName      String?  @map("bank_name")
  ibanNumber    String?  @map("iban_number")
  accountName   String?  @map("account_name")
  branchName    String?  @map("branch_name")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("site_settings")
}
